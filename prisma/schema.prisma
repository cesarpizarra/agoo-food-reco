generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model MenuCategory {
  id          String      @id @default(uuid())
  name        String      @unique
  description String      @db.Text
  status      String      @default("ACTIVE")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  menuItems   MenuItem[]  
}

model RestaurantCategory {
  id          String      @id @default(uuid())
  name        String      @unique
  description String      @db.Text
  status      String      @default("ACTIVE")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  restaurants Restaurant[]
}

model RestaurantGallery {
  id           String     @id @default(uuid())
  imageUrl     String
  caption      String?
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  
  @@index([restaurantId], map: "RestaurantGallery_restaurantId_fkey")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  foodId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  menuItem  MenuItem @relation(fields: [foodId], references: [id])

  @@index([foodId], map: "Comment_foodId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model Favorite {
  id           String     @id @default(uuid())
  userId       String
  restaurantId String
  createdAt    DateTime   @default(now())

  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([userId, restaurantId], map: "Favorite_userId_restaurantId_key")
  @@index([restaurantId], map: "Favorite_restaurantId_fkey")
}

model MenuItem {
  id           String      @id @default(uuid())
  name         String
  description  String
  price        Float
  imageUrl     String
  restaurantId String
  categoryId   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  category     MenuCategory? @relation(fields: [categoryId], references: [id])
  comments     Comment[]  

  @@index([categoryId], map: "MenuItem_categoryId_fkey")
  @@index([restaurantId], map: "MenuItem_restaurantId_fkey")
}

model Restaurant {
  id            String       @id @default(uuid()) @db.Char(36)
  ownerName     String?
  name          String
  description   String       @db.Text
  imageUrl      String
  address       String
  phone         String
  email         String
  status        RestaurantStatus @default(ACTIVE)
  openingHours  String       @db.Text
  averageRating Float        @default(0)
  totalReviews  Int          @default(0)
  categoryId    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  category      RestaurantCategory? @relation(fields: [categoryId], references: [id])
  menuItems     MenuItem[]   
  reviews       Review[]     
  favorites     Favorite[]   
  gallery       RestaurantGallery[] 

  @@index([categoryId], map: "Restaurant_categoryId_fkey")
}

model Review {
  id           String     @id @default(uuid())
  rating       Int
  comment      String?    @db.Text
  userId       String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([userId, restaurantId], map: "Review_userId_restaurantId_key")
  @@index([restaurantId], map: "Review_restaurantId_fkey")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique(map: "User_email_key")
  password     String
  role         Role       @default(USER)
  name         String?
  profileImage String?
  bio          String?    @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  emailVerified Boolean    @default(false)
  passwordResetToken PasswordResetToken?
  emailVerificationToken String? @unique @db.VarChar(512)
  emailVerificationExpires DateTime?

  comments     Comment[]  
  reviews      Review[]   
  favorites    Favorite[] 
}


model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique @db.VarChar(512)
  expiresAt DateTime
  createdAt DateTime @default(now())
}


enum Role {
  ADMIN
  USER
}

enum RestaurantStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}
